<?php
/**
 * Created by PhpStorm.
 * User: wangmg
 * Date: 2022/9/22
 * Time: 17:48
 */
//#122.买卖股票的最佳时机II
//力扣题目链接(opens new window)
//
//给定一个数组，它的第 i 个元素是一支给定股票第 i 天的价格。
//
//设计一个算法来计算你所能获取的最大利润。你可以尽可能地完成更多的交易（多次买卖一支股票）。
//
//注意：你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。
//
//示例 1:
//
//输入: [7,1,5,3,6,4]
//输出: 7
//解释: 在第 2 天（股票价格 = 1）的时候买入，在第 3 天（股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5-1 = 4。随后，在第 4 天（股票价格 = 3）的时候买入，在第 5 天（股票价格 = 6）的时候卖出, 这笔交易所能获得利润 = 6-3 = 3 。
//示例 2:
//
//输入: [1,2,3,4,5]
//输出: 4
//解释: 在第 1 天（股票价格 = 1）的时候买入，在第 5 天 （股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5-1 = 4 。注意你不能在第 1 天和第 2 天接连购买股票，之后再将它们卖出。因为这样属于同时参与了多笔交易，你必须在再次购买前出售掉之前的股票。
//示例 3:
//
//输入: [7,6,4,3,1]
//输出: 0
//解释: 在这种情况下, 没有交易完成, 所以最大利润为 0。
//提示：
//
//1 <= prices.length <= 3 * 10 ^ 4
//0 <= prices[i] <= 10 ^ 4
//#思路
//本题首先要清楚两点：
//
//只有一只股票！
//当前只有买股票或者卖股票的操作
//想获得利润至少要两天为一个交易单元。
//
//#贪心算法
//这道题目可能我们只会想，选一个低的买入，在选个高的卖，在选一个低的买入.....循环反复。
//
//如果想到其实最终利润是可以分解的，那么本题就很容易了！
//
//如何分解呢？
//
//假如第0天买入，第3天卖出，那么利润为：prices[3] - prices[0]。
//
//相当于(prices[3] - prices[2]) + (prices[2] - prices[1]) + (prices[1] - prices[0])。
//
//此时就是把利润分解为每天为单位的维度，而不是从0天到第3天整体去考虑！
//
//那么根据prices可以得到每天的利润序列：(prices[i] - prices[i - 1]).....(prices[1] - prices[0])。
//
//如图：
//
//122.买卖股票的最佳时机II
//
//一些同学陷入：第一天怎么就没有利润呢，第一天到底算不算的困惑中。
//
//第一天当然没有利润，至少要第二天才会有利润，所以利润的序列比股票序列少一天！
//
//从图中可以发现，其实我们需要收集每天的正利润就可以，收集正利润的区间，就是股票买卖的区间，而我们只需要关注最终利润，不需要记录区间。
//
//那么只收集正利润就是贪心所贪的地方！
//
//局部最优：收集每天的正利润，全局最优：求得最大利润。
//
//局部最优可以推出全局最优，找不出反例，试一试贪心！
//
//对应C++代码如下：
//
//class Solution {
//public:
//    int maxProfit(vector<int>& prices) {
//        int result = 0;
//        for (int i = 1; i < prices.size(); i++) {
//            result += max(prices[i] - prices[i - 1], 0);
//        }
//        return result;
//    }
//};
//时间复杂度：O(n)
//空间复杂度：O(1)
//#动态规划
//动态规划将在下一个系列详细讲解，本题解先给出我的C++代码（带详细注释），感兴趣的同学可以自己先学习一下。
//
//class Solution {
//public:
//    int maxProfit(vector<int>& prices) {
//        // dp[i][1]第i天持有的最多现金
//        // dp[i][0]第i天持有股票后的最多现金
//        int n = prices.size();
//        vector<vector<int>> dp(n, vector<int>(2, 0));
//        dp[0][0] -= prices[0]; // 持股票
//        for (int i = 1; i < n; i++) {
//            // 第i天持股票所剩最多现金 = max(第i-1天持股票所剩现金, 第i-1天持现金-买第i天的股票)
//            dp[i][0] = max(dp[i - 1][0], dp[i - 1][1] - prices[i]);
//            // 第i天持有最多现金 = max(第i-1天持有的最多现金，第i-1天持有股票的最多现金+第i天卖出股票)
//            dp[i][1] = max(dp[i - 1][1], dp[i - 1][0] + prices[i]);
//        }
//        return max(dp[n - 1][0], dp[n - 1][1]);
//    }
//};
//时间复杂度：$O(n)$
//空间复杂度：$O(n)$
//#总结
//股票问题其实是一个系列的，属于动态规划的范畴，因为目前在讲解贪心系列，所以股票问题会在之后的动态规划系列中详细讲解。
//
//可以看出有时候，贪心往往比动态规划更巧妙，更好用，所以别小看了贪心算法。
//
//本题中理解利润拆分是关键点！ 不要整块的去看，而是把整体利润拆为每天的利润。
//
//一旦想到这里了，很自然就会想到贪心了，即：只收集每天的正利润，最后稳稳的就是最大利润了。
//
//#其他语言版本

function maxProfit($nums){
    $length = count($nums);
    $count = 0;
    if ($length<2) return 0;
    for ($i=1;$i<$length;$i++){
        $sums = $nums[$i]-$nums[$i-1];
        if ($sums>0){
            $count += $sums;
        }
    }
    return $count;
}
$array = [7,1,5,3,6,4];
echo maxProfit($array);