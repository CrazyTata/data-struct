<?php
/**
 * Created by PhpStorm.
 * User: wangmg
 * Date: 2022/9/21
 * Time: 15:20
 */
//给定一个只包括 '('，')'，'{'，'}'，'['，']' 的字符串，判断字符串是否有效。
//
//有效字符串需满足：
//
//左括号必须用相同类型的右括号闭合。
//左括号必须以正确的顺序闭合。
//注意空字符串可被认为是有效字符串。
//示例 1:
//
//输入: "()"
//输出: true
//示例 2:
//
//输入: "()[]{}"
//输出: true
//示例 3:
//
//输入: "(]"
//输出: false
//示例 4:
//
//输入: "([)]"
//输出: false
//示例 5:
//
//输入: "{[]}"
//输出: true
//#思路
//《代码随想录》算法视频公开课：栈的拿手好戏！| LeetCode：20. 有效的括号 (opens new window)，相信结合视频在看本篇题解，更有助于大家对链表的理解。
//
//#题外话
//括号匹配是使用栈解决的经典问题。
//
//题意其实就像我们在写代码的过程中，要求括号的顺序是一样的，有左括号，相应的位置必须要有右括号。
//
//如果还记得编译原理的话，编译器在 词法分析的过程中处理括号、花括号等这个符号的逻辑，也是使用了栈这种数据结构。
//
//再举个例子，linux系统中，cd这个进入目录的命令我们应该再熟悉不过了。
//
//cd a/b/c/../../
//这个命令最后进入a目录，系统是如何知道进入了a目录呢 ，这就是栈的应用（其实可以出一道相应的面试题了）
//
//所以栈在计算机领域中应用是非常广泛的。
//
//有的同学经常会想学的这些数据结构有什么用，也开发不了什么软件，大多数同学说的软件应该都是可视化的软件例如APP、网站之类的，那都是非常上层的应用了，底层很多功能的实现都是基础的数据结构和算法。
//
//所以数据结构与算法的应用往往隐藏在我们看不到的地方！
//
//这里我就不过多展开了，先来看题。
//
//#进入正题
//由于栈结构的特殊性，非常适合做对称匹配类的题目。
//
//首先要弄清楚，字符串里的括号不匹配有几种情况。
//
//一些同学，在面试中看到这种题目上来就开始写代码，然后就越写越乱。
//
//建议要写代码之前要分析好有哪几种不匹配的情况，如果不动手之前分析好，写出的代码也会有很多问题。
//
//先来分析一下 这里有三种不匹配的情况，
//
//第一种情况，字符串里左方向的括号多余了 ，所以不匹配。 括号匹配1
//
//第二种情况，括号没有多余，但是 括号的类型没有匹配上。 括号匹配2
//
//第三种情况，字符串里右方向的括号多余了，所以不匹配。 括号匹配3
//
//我们的代码只要覆盖了这三种不匹配的情况，就不会出问题，可以看出 动手之前分析好题目的重要性。
//
//动画如下：
//
//20.有效括号
//
//第一种情况：已经遍历完了字符串，但是栈不为空，说明有相应的左括号没有右括号来匹配，所以return false
//
//第二种情况：遍历字符串匹配的过程中，发现栈里没有要匹配的字符。所以return false
//
//第三种情况：遍历字符串匹配的过程中，栈已经为空了，没有匹配的字符了，说明右括号没有找到对应的左括号return false
//
//那么什么时候说明左括号和右括号全都匹配了呢，就是字符串遍历完之后，栈是空的，就说明全都匹配了。
//
//分析完之后，代码其实就比较好写了，
//
//但还有一些技巧，在匹配左括号的时候，右括号先入栈，就只需要比较当前元素和栈顶相不相等就可以了，比左括号先入栈代码实现要简单的多了！
//
//实现C++代码如下：
//class Solution {
//public:
//bool isValid(string s) {
//if (s.size() % 2 != 0) return false; // 如果s的长度为奇数，一定不符合要求
//stack<char> st;
//for (int i = 0; i < s.size(); i++) {
//if (s[i] == '(') st.push(')');
//else if (s[i] == '{') st.push('}');
//else if (s[i] == '[') st.push(']');
//    // 第三种情况：遍历字符串匹配的过程中，栈已经为空了，没有匹配的字符了，说明右括号没有找到对应的左括号 return false
//    // 第二种情况：遍历字符串匹配的过程中，发现栈里没有我们要匹配的字符。所以return false
//else if (st.empty() || st.top() != s[i]) return false;
//else st.pop(); // st.top() 与 s[i]相等，栈弹出元素
//}
//        // 第一种情况：此时我们已经遍历完了字符串，但是栈不为空，说明有相应的左括号没有右括号来匹配，所以return false，否则就return true
//        return st.empty();
//    }
//};
//
//技巧性的东西没有固定的学习方法，还是要多看多练，自己灵活运用了。

function isValid1($s){
    $stack = new SplStack();
    for ($i = 0; $i < strlen($s); $i++) {
        if ($s[$i] == "(") {
            $stack->push(')');
        } else if ($s[$i] == "{") {
            $stack->push('}');
        } else if ($s[$i] == "[") {
            $stack->push(']');
            // 2、遍历匹配过程中，发现栈内没有要匹配的字符 return false
            // 3、遍历匹配过程中，栈已为空，没有匹配的字符了，说明右括号没有找到对应的左括号 return false
        } else if ($stack->isEmpty() || $stack->top() != $s[$i]) {
            return false;
        } else {//$stack->top() == $s[$i]
            $stack->pop();
        }
    }
    // 1、遍历完，但是栈不为空,说明有相应的括号没有被匹配,return false
    return $stack->isEmpty();
}

function isValid($s){
    $stack = new SplStack();
    for ($i=0;$i<strlen($s);$i++){
        if ($s[$i]=='('){
            $stack->push(')');
        }else if ($s[$i]=='{'){
            $stack->push('}');
        }else if ($s[$i]=='['){
            $stack->push(']');
        }else if ($stack->isEmpty()||$stack->top()!=$s[$i]){
            return false;
        }else{
            $stack->pop();
        }
    }
    return $stack->isEmpty();
}